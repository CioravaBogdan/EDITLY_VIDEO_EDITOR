{
  "name": "🎬 Editly Dynamic Duration Video Creator",
  "nodes": [
    {
      "parameters": {},
      "id": "webhook-start",
      "name": "📥 Webhook Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "sample-data",
              "name": "sampleData",
              "value": "[\n  {\n    \"audioPath\": \"/app/uploads/files-1753801198963-967848345.mp3\",\n    \"imagePath\": \"/app/uploads/files-1753809979219-248490257.png\"\n  },\n  {\n    \"audioPath\": \"/app/uploads/files-1753801198969-641241060.mp3\",\n    \"imagePath\": \"/app/uploads/files-1753809979224-923577472.png\"\n  },\n  {\n    \"audioPath\": \"/app/uploads/files-1753801198962-600451434.mp3\",\n    \"imagePath\": \"/app/uploads/files-1753809979226-469814619.png\"\n  }\n]",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "sample-data-node",
      "name": "📋 Sample Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// 🎬 EDITLY VIDEO CREATOR - DURATĂ DINAMICĂ BAZATĂ PE AUDIO\n// ✅ Rezoluție: 1024x1536 | Durată: bazată pe audio + buffer | Calitate maximă\n\nconst allPages = $input.all();\n\n// --- 🎯 CONFIGURAȚIE VIDEO ---\nconst VIDEO_CONFIG = {\n  width: 1024,              // Lățimea cerută\n  height: 1536,             // Înălțimea cerută\n  fps: 30,                  // Frame rate pentru calitate maximă\n  minDuration: 4,           // Durată minimă per clip (secunde)\n  maxDuration: 10,          // Durată maximă per clip (secunde)\n  audioBuffer: 2,           // Buffer minim între audio-uri (secunde)\n  silenceBetween: 2         // Pauză minimă între clipuri (secunde)\n};\n\n// 🧮 FUNCȚIE PENTRU CALCULAREA DURATEI CLIPULUI\nfunction calculateClipDuration(audioDuration) {\n  if (!audioDuration) {\n    // Fără audio - durată standard\n    return VIDEO_CONFIG.minDuration;\n  }\n  \n  if (audioDuration <= 4) {\n    // Audio scurt (≤4s) → clip de 4 secunde\n    return 4;\n  }\n  \n  if (audioDuration <= 5) {\n    // Audio 5s → clip de 8 secunde (5s audio + 3s buffer)\n    return 8;\n  }\n  \n  if (audioDuration <= 9) {\n    // Audio 6-9s → clip de 10 secunde (audio + 1-4s buffer)\n    return 10;\n  }\n  \n  // Audio foarte lung → limitează la maxim\n  return VIDEO_CONFIG.maxDuration;\n}\n\n// Procesăm datele de test\nconst testData = JSON.parse($json.sampleData);\n\nconsole.log(`🎬 Procesare carte digitală: ${testData.length} pagini`);\nconsole.log(`📐 Rezoluție video: ${VIDEO_CONFIG.width}x${VIDEO_CONFIG.height}`);\n\n// 🚀 Creăm array-ul de clipuri pentru Editly\nconst clips = [];\nlet totalEstimatedDuration = 0;\n\n// Procesăm fiecare pagină\nfor (let index = 0; index < testData.length; index++) {\n  const item = testData[index];\n  const { audioPath, imagePath } = item;\n  \n  // Verificăm că avem imagine (obligatoriu)\n  if (!imagePath) {\n    console.warn(`⚠️  Pagina ${index + 1} nu are imagine - omisă`);\n    continue;\n  }\n  \n  // Simulăm detectarea duratei audio (în implementarea reală folosești ffprobe)\n  let audioDuration = 0;\n  let clipDuration = VIDEO_CONFIG.minDuration;\n  \n  if (audioPath) {\n    // Pentru demo, simulăm durată audio între 3-9 secunde\n    audioDuration = Math.floor(Math.random() * 7) + 3;\n    clipDuration = calculateClipDuration(audioDuration);\n    \n    console.log(`🎵 Pagina ${index + 1}: Audio ${audioDuration}s → Clip ${clipDuration}s`);\n  } else {\n    console.log(`🖼️  Pagina ${index + 1}: Fără audio → Clip ${clipDuration}s`);\n  }\n  \n  // Construim clip-ul conform documentației Editly\n  const clip = {\n    duration: clipDuration,\n    layers: [\n      {\n        type: \"image\",\n        path: imagePath,\n        resizeMode: \"cover\"  // Cover pentru a umple ecranul\n      }\n    ]\n  };\n  \n  // Adăugăm audio dacă există\n  if (audioPath) {\n    clip.layers.push({\n      type: \"audio\", \n      path: audioPath,\n      mixVolume: 1.0,  // Volum original - NU modificăm\n      // Audio-ul va rula natural durata sa reală\n    });\n  }\n  \n  // Adăugăm clip de liniște între pagini (pentru separare clară)\n  if (index < testData.length - 1) {\n    clips.push(clip);\n    \n    // Clip de liniște între pagini\n    clips.push({\n      duration: VIDEO_CONFIG.silenceBetween,\n      layers: [\n        {\n          type: \"fill-color\",\n          color: \"#000000\"  // Ecran negru pentru pauză\n        }\n      ]\n    });\n    \n    totalEstimatedDuration += clipDuration + VIDEO_CONFIG.silenceBetween;\n  } else {\n    clips.push(clip);\n    totalEstimatedDuration += clipDuration;\n  }\n  \n  console.log(`✅ Pagina ${index + 1}: ${clipDuration}s (audio: ${audioDuration}s)`);\n}\n\n// 🎯 Configurația finală Editly - CALITATE MAXIMĂ\nconst editSpec = {\n  // Setări video principale\n  width: VIDEO_CONFIG.width,\n  height: VIDEO_CONFIG.height,\n  fps: VIDEO_CONFIG.fps,\n  \n  // Array-ul de clipuri cu durată dinamică\n  clips: clips,\n  \n  // 🚀 SETĂRI PENTRU CALITATE MAXIMĂ (nu fast mode)\n  fast: false,  // 🎯 DEZACTIVAT pentru calitate maximă\n  keepSourceAudio: true,  // Păstrăm calitatea audio originală\n  \n  // 🎵 Setări audio - calitate maximă\n  audioCodec: \"aac\",\n  audioBitrate: \"192k\",   // Bitrate mai mare pentru calitate\n  \n  // 🎬 Setări video - calitate maximă\n  videoBitrate: \"5000k\",  // Bitrate crescut pentru calitate 1024x1536\n  videoCodec: \"libx264\",\n  \n  // Fără tranziții pentru claritate\n  defaults: {\n    transition: null\n  },\n  \n  // 🚀 Argumente optimizate pentru calitate + performanță\n  customOutputArgs: [\n    // Video encoding pentru calitate\n    \"-c:v\", \"libx264\",\n    \"-preset\", \"medium\",    // Preset balansat calitate/viteză\n    \"-crf\", \"18\",           // Calitate foarte bună (18 = aproape lossless)\n    \"-profile:v\", \"high\",\n    \"-level\", \"4.0\",\n    \"-pix_fmt\", \"yuv420p\",\n    \n    // Audio encoding pentru calitate\n    \"-c:a\", \"aac\",\n    \"-b:a\", \"192k\",         // Bitrate audio crescut\n    \"-ar\", \"48000\",         // Sample rate ridicat\n    \"-ac\", \"2\",             // Stereo\n    \n    // Optimizări pentru streaming\n    \"-movflags\", \"+faststart\",\n    \n    // Multi-threading pentru performanță\n    \"-threads\", \"0\"         // Folosește toate cores-urile\n  ]\n};\n\n// 📁 Generăm numele fișierului\nconst timestamp = new Date().toISOString().replace(/[:.]/g, '-').substring(0, 19);\nconst outputFilename = `carte_digitala_HD_${timestamp}.mp4`;\n\n// 📊 Statistici finale\nconst validClips = clips.filter(c => c.layers.some(l => l.type === \"image\")).length;\nconst audioClips = clips.filter(c => c.layers.some(l => l.type === \"audio\")).length;\nconst totalMinutes = Math.floor(totalEstimatedDuration / 60);\nconst totalSeconds = totalEstimatedDuration % 60;\n\nconsole.log(\"\\n📊 === REZUMAT FINAL ===\");\nconsole.log(`✅ Pagini procesate: ${validClips}`);\nconsole.log(`🎵 Pagini cu audio: ${audioClips}`);\nconsole.log(`⏱️  Durată totală estimată: ${totalMinutes}m ${totalSeconds}s`);\nconsole.log(`📁 Nume fișier: ${outputFilename}`);\nconsole.log(`🎬 Calitate: HD ${VIDEO_CONFIG.width}x${VIDEO_CONFIG.height} @ ${VIDEO_CONFIG.fps}fps`);\nconsole.log(`🔊 Audio: Calitate originală, fără modificări`);\n\n// Verificare finală\nif (validClips === 0) {\n  throw new Error(\"❌ Nu există clipuri valide de procesat!\");\n}\n\n// 🎬 Returnăm configurația pentru Editly\nreturn {\n  editSpec: editSpec,\n  outputFilename: outputFilename,\n  stats: {\n    totalPages: validClips,\n    totalDuration: totalEstimatedDuration,\n    withAudio: audioClips,\n    resolution: `${VIDEO_CONFIG.width}x${VIDEO_CONFIG.height}`,\n    quality: \"HD_Maximum\",\n    audioQuality: \"Original_192k\"\n  }\n};"
      },
      "id": "dynamic-duration-processor",
      "name": "🎬 Dynamic Duration Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "http://editly-api:3001/edit",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "editSpec",
              "value": "={{ $json.editSpec }}"
            },
            {
              "name": "outputFilename",
              "value": "={{ $json.outputFilename }}"
            }
          ]
        },
        "options": {
          "timeout": 1800000
        }
      },
      "id": "editly-api-call",
      "name": "🚀 Editly API Call",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "success-condition",
              "leftValue": "={{ $json.message }}",
              "rightValue": "Video editing completed successfully",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "success-check",
      "name": "✅ Success Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.downloadUrl }}",
        "options": {
          "timeout": 300000
        }
      },
      "id": "download-video",
      "name": "📥 Download Video",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 240]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "final-result",
              "name": "result",
              "value": "{\n  \"status\": \"success\",\n  \"message\": \"✅ Video creat cu succes!\",\n  \"videoUrl\": \"{{ $('🚀 Editly API Call').item.json.downloadUrl }}\",\n  \"filename\": \"{{ $('🚀 Editly API Call').item.json.outputFilename }}\",\n  \"stats\": {{ $('🎬 Dynamic Duration Processor').item.json.stats }},\n  \"fileSize\": \"{{ $binary.data.fileSize }}MB\",\n  \"processingTime\": \"{{ $workflow.timestamp - $('📥 Webhook Start').item.json.timestamp }}ms\"\n}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "success-result",
      "name": "🎉 Success Result",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1560, 240]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-result", 
              "name": "error",
              "value": "{\n  \"status\": \"error\",\n  \"message\": \"❌ Eroare la procesarea video\",\n  \"details\": \"{{ $json.error || $json.message }}\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "error-result",
      "name": "❌ Error Result", 
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1340, 360]
    }
  ],
  "connections": {
    "📥 Webhook Start": {
      "main": [
        [
          {
            "node": "📋 Sample Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📋 Sample Data": {
      "main": [
        [
          {
            "node": "🎬 Dynamic Duration Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🎬 Dynamic Duration Processor": {
      "main": [
        [
          {
            "node": "🚀 Editly API Call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🚀 Editly API Call": {
      "main": [
        [
          {
            "node": "✅ Success Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "✅ Success Check": {
      "main": [
        [
          {
            "node": "📥 Download Video",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "❌ Error Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📥 Download Video": {
      "main": [
        [
          {
            "node": "🎉 Success Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-29T20:45:00.000Z",
  "versionId": "1"
}